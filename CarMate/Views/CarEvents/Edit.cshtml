@using CarMate
@using Newtonsoft.Json
@model CarEvents

@{
    ViewBag.Title = Resources.CarEvents.EditEvent;
    
    // ВНИМАНИЕ КОСТЫЛЬ!
    // Создаю новый объект на подобии модели, чтобы конвертировать его в JSON и передать в контроллер
    // Для заполнения PartialView данными (тоесть PartialView будет прилетать с заполнеными данными)
    CarEvents carEvent = new CarEvents()
    {
        CarId = Model.CarId,
        FuelCategoryId = Model.FuelCategoryId,
        FuelCount = Model.FuelCount,
        IsFullTank = Model.IsFullTank,
        IsMissedFilling = Model.IsMissedFilling,
        PricePerLitr = Model.PricePerLitr
    };
    string str = JsonConvert.SerializeObject(carEvent);
}

<div class="container">
    <h2>@Resources.Car.Owner: "@ViewBag.User.Nickname"</h2>
    <div class="row">
        @Html.Partial("_PartCarInfo", (Cars)ViewBag.Car)
        <div class="col-lg-9 col-md-9">
            @Html.Partial("_PartCarMenu")
            <hr />
            <div id="carContainer">
                <h2>@ViewBag.Title</h2>
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    @Html.HiddenFor(x => x.CarId)
                    @Html.HiddenFor(x => x.EventTypes.Name)

                    <div class="form-horizontal">
                        <div class="form-group">
                            @Html.LabelFor(events => events.DateEvent, Resources.CarEvents.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                <div class="input-group" role="group">
                                    @Html.TextBoxFor(model => model.DateEvent, "{0:dd.MM.yyyy}", htmlAttributes: new
                                    {
                                        @class = "form-control"
                                        //data_provide = "datepicker",
                                        //@Value = Model.DateEvent.ToString("dd/MM/yyyy"),
                                    })
                                    <span class="input-group-addon" id="icon_datepicker" onclick=" OpenDatepicker() ">
                                        <i class="glyphicon glyphicon-th"></i>
                                    </span>
                                    @*@Html.ValidationMessageFor(model => model.DateEvent, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(events => events.Odometer, Resources.CarEvents.Odometer, htmlAttributes: new {@class = "control-label col-md-2"})
                            <div class="col-md-3">
                                @Html.TextBoxFor(events => events.Odometer, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Odometer, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(events => events.EventTypeId, Resources.CarEvents.Event, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.DropDownList("EventTypeId", null, htmlAttributes: new { @class = "form-control", onchange = "GetEvent(this)" })
                                @Html.ValidationMessageFor(model => model.EventTypeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <span class="form-group" id="carEventEdit">
                            @Html.Action("GetEvent")
                        </span>

                        <div class="form-group">
                            @Html.LabelFor(events => events.CostTotal, Resources.CarEvents.Cost, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.TextBoxFor(events => events.CostTotal, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CostTotal, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(events => events.Comment, Resources.CarEvents.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.TextAreaFor(model => model.Comment, 10, 30, htmlAttributes: new { @class = "form-control", @style = "-moz-resize:none;-ms-resize:none;-o-resize:none;resize:none;" })
                                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="@Resources.Global.Save" class="btn btn-default" />
                                @Html.ActionLink(Resources.Global.Back, "Index", "CarEvents", new { carId = Model.CarId }, new { @class = "btn btn-default" })
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    function GetEvent(selectElement) {
        var name = selectElement.options[selectElement.selectedIndex].text;
        var carEventModel = '@(str)';
        // Подружаю PartialView и передаю в нее модель
        $("#carEventEdit").load('@(Url.Action("GetEvent", "CarEvents"))', { "carEventJson": carEventModel, "name": name });
    }

    function OpenDatepicker() {
        $('#DateEvent').datepicker('show');
    }

    $(document).ready(function () {
        // Получаем язык пользователя
        var lang = '@ViewBag.LanguageName';
        // Инициализация календаря
        $('#DateEvent').datepicker({
            format: "dd.mm.yyyy",
            weekStart: 1,
            todayBtn: "linked",
            language: lang,
            autoclose: true,
            todayHighlight: true
        });

        // Генерируем событие onchange для выпадающего списка с событиями автомобилей
        $('#EventTypeId').trigger('change');

        // Инициализация рейтинга
        $("#car_rating").rating({ readOnly: true });

        // При наведении на иконку календаря меняется курсор
        $('#icon_datepicker').mouseenter(function () {
            $(this).css({ cursor: 'pointer' });
        });

        // При наведении на поле ввода календаря меняется курсор
        $('#DateBuy').mouseenter(function () {
            $(this).css({ cursor: 'pointer' });
        });

        // При изменении в поле "Общая стоимость"
        $('#CostTotal').blur(function () {
            // Получаем данные из поля CostTotal (общая стоимость)
            var costTotal = $('#CostTotal').val();
            // Если CostTotal (общая стоимость) не число - выходим
            if (!$.isNumeric(costTotal)) {
                return;
            }

            // Получаем данные из поля PricePerLitr (цена за литр)
            var pricePerLitr = $('#PricePerLitr').val();
            // Если PricePerLitr (цена за литр) не число - выходим
            //if (!$.isNumeric(pricePerLitr)) {
            //    return;
            //}

            // Получаем данные из поля FuelCount (количество залитого топлива)
            var fuelCount = $('#FuelCount').val();
            // Если PricePerLitr (цена за литр) и FuelCount (количество залитого топлива) НЕ ЧИСЛО - выходим
            if (!$.isNumeric(fuelCount) && !$.isNumeric(pricePerLitr)) {
                return;
            }
            // Если PricePerLitr (цена за литр) и FuelCount (количество залитого топлива) ЧИСЛО - выходим
            // Т.к. не знаем какое поле изменять
            if ($.isNumeric(fuelCount) && $.isNumeric(pricePerLitr)) {
                return;
            }

            // Если PricePerLitr (цена за литр) это число, то считаем FuelCount (количество залитого топлива)
            if ($.isNumeric(pricePerLitr)) {
                // Считаем количество залитого бензина
                var fuelCountResult = costTotal / pricePerLitr;

                // Если fuelCount (Залито топлива) не число - выходим
                if (!$.isNumeric(fuelCountResult)) {
                    return;
                }
                // Округляем до 2-х знаков, после запятой
                fuelCountResult = fuelCountResult.toFixed(2);

                // Результат вычисления помещаем в поле FuelCount (Залито топлива)
                $('#FuelCount').val(fuelCountResult);
            }

            // Если FuelCount (количество залитого топлива) это число, то считаем PricePerLitr (цена за литр)
            if ($.isNumeric(fuelCount)) {
                // Считаем количество залитого бензина
                var pricePerLitrResult = costTotal / fuelCount;

                // Если fuelCount (Залито топлива) не число - выходим
                if (!$.isNumeric(pricePerLitrResult)) {
                    return;
                }
                // Округляем до 2-х знаков, после запятой
                pricePerLitrResult = pricePerLitrResult.toFixed(2);

                // Результат вычисления помещаем в поле FuelCount (Залито топлива)
                $('#PricePerLitr').val(pricePerLitrResult);
            }
        });
    });
</script>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Script/bootstrap-datepicker")
    @Scripts.Render("~/Scripts/rating")
}