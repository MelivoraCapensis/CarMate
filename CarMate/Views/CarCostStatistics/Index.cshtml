@using CarMate.Classes
@using Newtonsoft.Json
@model IEnumerable<CarMate.CarEvents>

@{
    ViewBag.Title = "Статистика затрат";
    // Всего потрачено денег на группы событий (Заправка, ремонт), за определенный период
    Dictionary<string, double> allCostStatistics = new Dictionary<string, double>();
    // Всего потрачено денег, за определеный период
    double allCosts = 0;
    // Потрачено денег на бензин, за определенный период
    Dictionary<DateTime, double> fuelCosts = new Dictionary<DateTime, double>();
    // Потрачено денег на группы событий по месяцам, за определенный период
    Dictionary<string, double> otherCostStatistics = new Dictionary<string, double>();
    // Мойка, нет в списке, ремонт, стоянка, страховка, техосмотр, штраф, эвакуатор
    
    // Получаем названия событий
    foreach (var eventType in ViewBag.EventTypes)
    {
        allCostStatistics.Add(eventType, 0);
        if (!eventType.Equals(Consts.EventTypeNameAzs))
        {
            otherCostStatistics.Add(eventType, 0);
        }
    }

    foreach (var carEvent in Model)
    {
        allCostStatistics[carEvent.EventTypes.Name] += carEvent.CostTotal;
        if (otherCostStatistics.ContainsKey(carEvent.EventTypes.Name))
        {
            otherCostStatistics[carEvent.EventTypes.Name] += carEvent.CostTotal;
        }
        allCosts += carEvent.CostTotal;
        if (carEvent.EventTypes.Name.Equals(Consts.EventTypeNameAzs))
        {
            var result = fuelCosts.FirstOrDefault(x => x.Key.Year == carEvent.DateEvent.Year && x.Key.Month == carEvent.DateEvent.Month);
            if (result.Key != DateTime.MinValue)
            {
                fuelCosts[result.Key] = Math.Round(fuelCosts[result.Key] + carEvent.CostTotal, 2);
            }
            else
            {
                fuelCosts.Add(new DateTime(carEvent.DateEvent.Year, carEvent.DateEvent.Month, 1), Math.Round(carEvent.CostTotal, 2));
            }
        }
    }
    var dataKey = allCostStatistics.Keys.ToArray();
    var dataValue = allCostStatistics.Values.ToArray();

    //string allCostStatisticsJson = JsonConvert.SerializeObject(allCostStatistics);

    string dataKeyJson = JsonConvert.SerializeObject(dataKey);
    string dataValueJson = JsonConvert.SerializeObject(dataValue);

    List<double> tmpFuelCosts = new List<double>();
    tmpFuelCosts.AddRange(fuelCosts.Values);
    string tmpFuelCostsJson = JsonConvert.SerializeObject(tmpFuelCosts.ToArray());

    //List<double> tmpСarwash = new List<double>();
    //foreach (var item in otherCostStatistics)
    //{
    //    if (item.Key.Equals(Consts.EventTypeNameСarwash))
    //    {
    //        tmpСarwash.Add(item.Value);
    //    }
    //}
    
    //string tmpFuelCostsJson = JsonConvert.SerializeObject();
    
    
}

@*<h2>Index</h2>*@
<div class="container">
    <h2>Владелец: "@ViewBag.User.Nickname"</h2>
    <div class="row">
        @Html.Partial("_PartCarInfo", (CarMate.Cars)ViewBag.Car)
        <div class="col-lg-9 col-md-9">
            @Html.Partial("_PartCarMenu")
            <hr />
            <div id="carContainer">
                @*<h2>@ViewBag.Title</h2>*@
                <p>
                    Всего денег потрачено: @allCosts грн.
                </p>


                <div id="allCostStatistics" class="col-lg-12 col-md-12"></div>
                <div id="fuelCostStatistics" class="col-lg-12 col-md-12"></div>
                <div id="otherCostStatistics" class="col-lg-12 col-md-12"></div>

            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    $(document).ready(function () {
        var carId = '@(ViewBag.Car.Id)';




        var dataKeyJson = '@(dataKeyJson)';

        // Меняем все символы "&quot;" на кавычку
        dataKeyJson = dataKeyJson.replace(new RegExp('&quot;', 'g'), '\"');
        var dataKey = JSON.parse(dataKeyJson);

        var dataValueJson = '@(dataValueJson)';
        var dataValue = JSON.parse(dataValueJson);

        //var arr = new Array();
        //for (var i = 0; i < dataKey.length; i++) {
        //    arr[dataKey[i]] = dataValue[i];
        //    alert(arr[dataKey[i]]);
        //}
        //alert(arr["Заправка"]);

        jQuery.getJSON("CarCostStatistics/GetCostStatistics", { "carId": carId }, function (items) {

            // График статистика расходов
            $(function() {
                var dataAll = []; // Создается пустой массив
                jQuery.each(items, function(itemNo, item) {
                    dataAll.push({ name: item.Name, y: item.Summ });
                });

                $('#allCostStatistics').highcharts({
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: null,
                        plotShadow: false
                    },
                    title: {
                        text: 'Статистика расходов'
                    },
                    subtitle: {
                        text: 'Период: '
                    },
                    tooltip: {
                        headerFormat: '',
                        pointFormat: '<b>{point.name}: {point.percentage:.1f}%</b>'
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            cursor: 'pointer',
                            dataLabels: {
                                enabled: true,
                                //format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                                format: '<b>{point.name}</b>: {point.y:.2f}грн', // Формат отображаемой надписи, рядом с каждой частью графика
                                style: {
                                    color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                                }
                            }
                        }
                    },
                    series: [
                        {
                            type: 'pie',
                            name: 'Денег потрачено',
                            data: dataAll
                        }
                    ]
                });
            });


        @*var tmpFuelCostsJson = '@(tmpFuelCostsJson)';
        var tmpFuelCosts = JSON.parse(tmpFuelCostsJson);*@

        

            $(function() {
                //$.getJSON('http://www.highcharts.com/samples/data/jsonp.php?filename=aapl-c.json&callback=?', function(data) {

                    var dataFuel = []; // Создается пустой массив
                    jQuery.each(items, function (itemNo, item) {
                        if (item.Name == "Заправка") {
                            //alert("Заправка");
                            jQuery.each(item.Details, function (itemNoDetails, itemDetails) {

                                //alert("C# = " + itemDetails.Ticks + "\nJS = " + new Date().getTime());
                                //alert("C# = " + itemDetails.Ticks + "\nJS = " + ((new Date(2015, 5, 4).getTime() * 10000) + 621355968000000000));
                                var s = (itemDetails.Ticks - 621355968000000000) / 10000;
                                //alert(itemDetails.Ticks);
                                dataFuel.push({ x: s, y: itemDetails.Cost });
                            });
                        }
                    });


                    // Create the chart
                $('#fuelCostStatistics').highcharts(
                    'StockChart', {
                        xAxis: {
// Поменять настрокий отображаемой даты, в зависимости от того, какой режим отображения выбран
                            type: 'datetime',
                            dateTimeLabelFormats: {
                                second: '%Y-%m-%d<br/>%H:%M:%S',
                                minute: '%Y-%m-%d<br/>%H:%M',
                                hour: '%Y-%m-%d<br/>%H:%M',
                                day: '%Y<br/>%m-%d',
                                week: '%Y<br/>%m-%d',
                                month: '%Y-%m',
                                year: '%Y'
                            }
                        },

                        rangeSelector: {
                            selected: 1
                        },

                        title: {
                            text: 'Затраты на топливо'
                        },

                        series: [
                        {
                            name: 'AAPL Stock Price',
                            data: dataFuel,
                                    //    [
                                    //    { x: 1147151200000, y: 312.23 },
                                    //    { x: 1147251200000, y: 33.23 },
                                    //    { x: 1147351200000, y: 4564.23 },
                                    //    { x: 1147451200000, y: 645.23 },
                                    //    { x: 1147551200000, y: 645.23 }
                                    //],
                                    marker: {
                                        enabled: true,
                                        radius: 3
                                    },
                                    shadow: true,
                                    tooltip: {
                                        valueDecimals: 2
                                    }
                                }
                            ]
                        });
                //});
            });


        // Затраты на бензин за определенный период
        //$(function () {
        //    var tmpFuelCosts = [];
        //    //jQuery.getJSON("CarCostStatistics/GetCostStatistics", { "carId": carId }, function(items) {
        //    jQuery.each(items, function (itemNo, item) {
        //        //alert(item);
        //        if (item.Name === "Заправка") {
        //            //alert("Заправка");
        //            //tmpFuelCosts = item.Details.Cost;
        //            var tmp = [];   // Создается пустой массив
        //            jQuery.each(item.Details, function (itemNo1, item1) {
                        
        //                if (!tmp[item1.Year, item1.Month]) {
        //                    tmp.push(item1.Cost);
        //                    //alert(tmp.length);
        //                } else {
        //                    tmp[item1.Year, item1.Month] += item1.Cost;
        //                    //alert(tmp.length);
        //                }
        //            });
        //            //alert(tmp[0]);
        //            tmpFuelCosts = tmp;
        //            //alert(tmpFuelCosts[0]);
        //            //alert(item.Details[0].Cost);
        //        }
        //    });
        //    //});

        //    var arr = new Array(tmpFuelCosts.length);
        //    for (var j = 0; j < arr.length; j++) {
        //        arr[j] = '';
        //    }

        //    $('#fuelCostStatistics').highcharts({
        //        chart: {
        //            type: 'line'
        //        },
        //        title: {
        //            text: 'Затраты на топливо'
        //        },
        //        subtitle: {
        //            text: 'За период (сумма за месяц)'
        //        },
        //        xAxis: {
        //            //categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        //            categories: arr
        //        },
        //        yAxis: {
        //            title: {
        //                text: 'Денег потрачено'
        //            }
        //        },
        //        plotOptions: {
        //            line: {
        //                dataLabels: {
        //                    enabled: true
        //                },
        //                enableMouseTracking: false
        //            }
        //        },
        //        series: [
        //            {
        //                name: 'Топливо',
        //                data: tmpFuelCosts
        //            }
        //            //, {
        //            //    name: 'London',
        //            //    data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]
        //            //}
        //        ]
        //    });
        //});


        $(function() {

            var brandsData = [];
            var drilldownSeries = [];


            //jQuery.getJSON("CarCostStatistics/GetCostStatistics", { "carId": carId }, function(items) {
                jQuery.each(items, function(itemNo, item) {
                    brandsData.push({
                        name: item.Name,
                        y: item.Summ,
                        drilldown: item.Name
                    });

                    var versions = {};
                    $.each(item.Details, function(itemDetailsNo, itemDetails) {
                        if (!versions[item.Name]) {
                            versions[item.Name] = [];
                        }
                        var str = "";
                        if (itemDetails.Month < 10) {
                            str = "0" + itemDetails.Month + "/" + itemDetails.Year;
                        } else {
                            str = itemDetails.Month + "/" + itemDetails.Year;
                        }
                        
                        versions[item.Name].push([str, itemDetails.Cost]);
                    });

                    drilldownSeries.push({
                        name: item.Name,
                        id: item.Name,
                        data: versions[item.Name]
                    });

                });

                Highcharts.setOptions({
                    lang: {
                        drillUpText: 'Назад'
                    }
                });

                $('#otherCostStatistics').highcharts({
                    chart: {
                        type: 'column'
                    },
                    title: {
                        text: 'Другие события'
                    },
                    subtitle: {
                        text: 'Нажмите на колонку, для более подробной статистики'
                    },
                    xAxis: {
                        type: 'category'
                    },
                    yAxis: {
                        title: {
                            text: 'Сумма за выбранный период'
                        }
                    },
                    legend: {
                        enabled: false
                    },
                    plotOptions: {
                        series: {
                            borderWidth: 0,
                            dataLabels: {
                                enabled: true,
                                format: '{point.y:.2f}'
                            }
                        }
                    },

                    tooltip: {
                        headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                        pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}</b>грн<br/>'
                    },

                    series: [
                        {
                            name: 'Событие',
                            colorByPoint: true,
                            data: brandsData
                        }
                    ],
                    drilldown: {
                        series: drilldownSeries
                    }
                });
            });
        });
    });
</script>

@section scripts {
    <script src="http://code.highcharts.com/stock/highstock.js"></script>
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Script/highcharts")
}