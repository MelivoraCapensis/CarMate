@model CarMate.Cars

@{
    ViewBag.Title = "Редактирование транспортного средства";
    var modificationId = 0;
}

<div class="container">

    <h4>
        Редактирование транспортного средства "@Model.CarModels.CarBrands.brand - @Model.CarModels.model -
        @if (Model.ModificationId != null)
        {
            @: @Model.CarModifications.modification
            modificationId = (int)Model.ModificationId;
        }
        "
    </h4>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.UserId)

        <div class="form-horizontal">
            <div class="form-group">
                @Html.LabelFor(model => model.CarModels.brandId, "Марка", htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-3">
                    @Html.DropDownList("brandId", null, htmlAttributes: new {@class = "form-control", onchange = "GetModels(this)"}, optionLabel: "-выберите марку-")
                    @Html.ValidationMessageFor(model => model.CarModels.brandId, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group" id="car_model">
                @Html.Action("GetModels")
            </div>

            <div class="form-group" id="car_modification">
                @Html.Action("GetModifications")
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Consumption, "Расход топлива", htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-3">
                    @Html.TextBoxFor(cars => cars.Consumption, null, htmlAttributes: new {@class = "form-control"})
                    @Html.ValidationMessageFor(cars => cars.Consumption, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Odometer, "Пробег", htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-3">
                    @Html.TextBoxFor(cars => cars.Odometer, null, htmlAttributes: new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Odometer, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Tank, "Объем бака", htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-3">
                    @Html.TextBoxFor(cars => cars.Tank, null, htmlAttributes: new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Tank, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group col-md-12">
                @Html.LabelFor(model => model.DateBuy, "Дата покупки", htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.DateBuy, htmlAttributes: new
                    {
                        @class = "form-control",
                        data_provide = "datepicker",
                        @Value = Model.DateBuy.Value.ToString("d")
                    })
                    @Html.ValidationMessageFor(model => model.DateBuy, "", new {@class = "text-danger"})
                </div>
            </div>

            <p>
                <input type="submit" value="Сохранить" class="btn btn-primary"/>
                @Html.ActionLink("Назад", "Details", "User", new {id = Model.UserId}, new {@class = "btn btn-primary"})
            </p>
        </div>
    }
</div>

<script type="text/javascript">
    @* При изенении марки автомобиля подружаем модели *@
    function GetModels(id) {
        var brandId = id.value;
        $("#car_model").load('@(Url.Action("GetModels","Car"))', { "brandId": brandId });
        $("#car_modification").load('@(Url.Action("GetModifications","Car"))', { "modelId": 0 });
    }

    @* При изенении модеои автомобиля подружаем модификации *@
    function GetModifications(id) {
        var modelId = id.value;
        $("#car_modification").load('@(Url.Action("GetModifications","Car"))', { "modelId": modelId });
    }

    $(document).ready(function () {
        var carBrandId = '@(Model.CarModels.CarBrands.id)';
        var carModelId = '@(Model.CarModels.id)';
        var carModificationId = '@(modificationId)';

        //alert("carBrandId = " + carBrandId);
        $('#brandId').trigger('change');    // Генерируем событие onchange для выпадающего списка с брендами автомобилей

        // Функция отрабатывает, через секунду
        setTimeout(function () {

            $("#modelId option[value='" + carModelId + "']").attr("selected", "selected");  // Выбираем марку автомобиля с определенным Id
            $('#modelId').trigger('change');    // Генерируем событие onchange для выпадающего списка с марками автомобилей

            // Функция отрабатывает, через секунду
            setTimeout(function () {
                $("#modificationId option[value='" + carModificationId + "']").attr("selected", "selected");    // Выбираем модификацию автомобиля с определенным Id
            }, 1000);
        }, 1000);
    });
</script>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Script/bootstrap-datepicker")
}