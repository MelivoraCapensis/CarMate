<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvantagesService" xml:space="preserve">
    <value>Advantages of the service:</value>
  </data>
  <data name="BrandsAzs" xml:space="preserve">
    <value>brand gas stations</value>
  </data>
  <data name="CommentsAndRatings" xml:space="preserve">
    <value>Comments and ratings</value>
  </data>
  <data name="ComparisonCars" xml:space="preserve">
    <value>Comparison their cars with other owners of the same car</value>
  </data>
  <data name="DataFromOtherUsers" xml:space="preserve">
    <value>Data from other users</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Accounting for the cost of the car, expenditure statistics, comparison of indicators</value>
  </data>
  <data name="DisplayFuelPrices" xml:space="preserve">
    <value>Display fuel prices from different sources</value>
  </data>
  <data name="DisplayOnMap" xml:space="preserve">
    <value>Display on the map</value>
  </data>
  <data name="DisseminationData" xml:space="preserve">
    <value>Dissemination data</value>
  </data>
  <data name="FillingData" xml:space="preserve">
    <value>Filling data</value>
  </data>
  <data name="GettingPoiPoints" xml:space="preserve">
    <value>Getting points and POI display on the map</value>
  </data>
  <data name="HelpsSaving" xml:space="preserve">
    <value>Helps saving</value>
  </data>
  <data name="HowMoneySpent" xml:space="preserve">
    <value>How much money is spent on car maintenance for the current year?</value>
  </data>
  <data name="HowWork" xml:space="preserve">
    <value>How does it work?</value>
  </data>
  <data name="MarkAuto" xml:space="preserve">
    <value>car brands</value>
  </data>
  <data name="MonitoringFuelPrices" xml:space="preserve">
    <value>Monitoring fuel prices</value>
  </data>
  <data name="PersonalProfile" xml:space="preserve">
    <value>Personal profile</value>
  </data>
  <data name="PlanningService" xml:space="preserve">
    <value>Planning and scheduling of future maintenance</value>
  </data>
  <data name="ProvidingInformationAboutOtherCars" xml:space="preserve">
    <value>Providing information about other cars</value>
  </data>
  <data name="Registration" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="RememberEvents" xml:space="preserve">
    <value>Remembering the events connected with the car and statistics</value>
  </data>
  <data name="RetrievingData" xml:space="preserve">
    <value>Retrieving data</value>
  </data>
  <data name="Saving" xml:space="preserve">
    <value>Saving!</value>
  </data>
  <data name="ShowLocation" xml:space="preserve">
    <value>Show location</value>
  </data>
  <data name="ShowPrice" xml:space="preserve">
    <value>Show price</value>
  </data>
  <data name="StoredEvents" xml:space="preserve">
    <value>Stored events</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>CarMate monitoring of prices of fuel, logbook</value>
  </data>
  <data name="WhatProblemsWeSolve" xml:space="preserve">
    <value>What problems we solve?</value>
  </data>
  <data name="WhenNeedMaintenance" xml:space="preserve">
    <value>When you need to do this or change oil and other consumables?</value>
  </data>
  <data name="WhereDesiredNetworkGasStations" xml:space="preserve">
    <value>Where the necessary network of gas stations?</value>
  </data>
  <data name="WhereRefuelCheaperAndFuelFit" xml:space="preserve">
    <value>Where to refuel cheaper fuel and fit?</value>
  </data>
  <data name="WhyIsThis" xml:space="preserve">
    <value>Why is this?</value>
  </data>
  <data name="WhyIsThisAnswer" xml:space="preserve">
    <value>If the driver wants to save, we give him a tool, "Web application" and "long arm" of the mobile application. By this the user adds his motivation and ultimately yielded the expected results - saving.</value>
  </data>
</root>